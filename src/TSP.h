/*
*  TSP.h
*  the following class implements solutions to the traveling salesman problem
*  Solutions implemented are
*   - Brute Force
*   - Shortest Edge
*   - Nearest Neighbor
*   - two-Opt
*   - three-Opt
*   - Cheapest Insert
*/

#ifndef TSP_H
#define TSP_H

#include <stdio.h>
#include <time.h>

const int W_WIDTH = 1080.0, W_HEIGHT = 1080.0;  //dimension of drawing windows

const float lleft = 0.0;                 //dimension of viewports
const float rright = W_WIDTH;
const float bbottom = 0.0;
const float ttop = W_HEIGHT;

struct node
{
    int data;
    node *next;
};

class TSP {

public :

/*Class constructor
    * Pre : number of towns to connect
    * Post : TSP object constructed with randomly populated array
    * where values are, if even, x and, if odd, y coordinates
    * constructs an array to be filled with the optimal tour
    */
    TSP(int s);

/*Class destructor
     * Pre : none
     * Post : the arrays random and optTour are freed from memory
     */
    ~TSP();

/* Standard bruteForce algorithm
     * Pre : none
     * Post : Fastest route to travel by permuting
     * through all tours and choosing the shortest
     */
    void bruteForce();

/* Shortest edge algorithm
     * Pre : none
     * Post : A near optimal tour is generated by connecting
     * shortest edges whose vertices are disjoint
     */
    void shortestEdge();

/* Nearest neighbor algorithm
     * Pre : none
     * Post : A near optimal tour is generated by connecting
     * the most recently added vertex to the nearest vertex
     * not already in the tour
     */
    void nearestNeighbor();

/* 2-opt
     * Pre : none / tour to improve
     * bool represents whether it should create a random array or use the classes optimal tour
     * Post : Optimizes a tour
     */
    void two_opt(bool);

/* 2-opt
     * Pre : none / tour to improve
     * bool represents whether it should create a random array or use the classes optimal tour
     * Post : Optimizes a tour
     */
    void three_opt(bool);

/* CheapestInsert
     * Pre : none
     * Post : A near optimal tour is generated by inserting an
     * arbitrary unincorporated point into the tour and finding
     * the two incoporated vertices that it can be placed between
     * for the shortest tour
     */
    void cheapestInsert();

/* Toggles output flags
     * Pre: none
     * Post: Only final tour is outputted
     */
    void less();

/* return SIZE
     * Pre: none
     * Post: return size
     */
     int returnSize(){
       return SIZE;
     }

/* inputs points for the tour
      * Pre: x,y coordinates for all points and number of points
      * Post: random is updated with new points
      */
      void inputRandom(int *tour, int points){
        for(int i; i<points;i++){
          random[i]=tour[i];
        }
      }
private :
    //The following are TSP arrays
    /* ------------------------------ */
    //(x,y) data to be routed through
    //filled with random values
    int *random;

    //to be filled with optimal tour
    //starts and ends with 0 which makes into a circle
    int *optTour;
    //the following are TSP global values
    //size of generated points
    int SIZE;
    //simplifies outputs
    bool flag;
    //The following are helper functions
    /* ------------------------------ */
    //prints the tour order
    void printTour(int *tour, int totSize);
    //calculates distance between points
    float dist(int a,int b,int c,int d);
    //calculates the distance between 3 points (used in cheapest insert)
    float memDist(int a, int b, int c);
    //uses OpenGL to draw inputted tour with a delay
    void draw(int *tour, int delay);
    void drawIns(int *tour, int delay, int length);
    //calculates distance of tour
    float tourLen(int *tour);
    //delays for some number of milliseconds
    void delay(int milliseconds);
    //modified quicksort and its helper functions
    void swap(int *a, int *b);
    int partition(int *edges, int l, int r);
    void quicksort(int *edges, int l, int r);


};

#endif /* TSP_H */
